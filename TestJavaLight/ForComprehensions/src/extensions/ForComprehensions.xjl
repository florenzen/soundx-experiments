package extensions;

import extensions.EnhancedForStatement;

public extension ForComprehensions {
        context-free syntax
          "for" "(" Enumerators ")" Statement -> Statement

          Enumerator                 -> Enumerators
          Enumerator ";" Enumerators -> Enumerators
          
          ID "<-" Expr -> Enumerator
          "if" Expr    -> Enumerator
          ID "=" Expr  -> Enumerator

        lexical syntax
          "enums" ALPHANUMS -> MVEnumerators

        lexical restrictions
          MVEnumerators -/- [a-zA-Z0-9]

        variables
          MVEnumerators -> Enumerators {prefer}

    inductive definitions
      S-ForCompGen:
        typevars(CT) = X*
        CT.javalight.lang.JLIterable = {[], iterator:[]->javalight.util.JLIterator A::[] :: [], Object, A::[]}
        CT.javalight.util.JLIterator = {[], hasNext:[]->boolean :: next:[]->A :: [], Object, A::[]}

        CT; Ef; El |- e : s
        CT |- s <: javalight.lang.JLIterable t::[]
        s =/=AType javalight.lang.JLIterable t::[]

        norm(CT, X*, T) = t
        norm(CT, X*, JLIterator<T>) = javalight.util.JLIterator t::[]


        x notin dom(El)
        CT; Ef; El,x:t |- stm ~ void

        CT; Ef; El |- stm* ~ rt
        ------------------------------------------------------------------------------------------------------
        CT; Ef; El |- for(x <- e) stm stm* ~ rt

      S-ForCompGenEnums:
        typevars(CT) = X*

        CT.javalight.lang.JLIterable = {[], iterator:[]->javalight.util.JLIterator A::[] :: [], Object, A::[]}
        CT.javalight.util.JLIterator = {[], hasNext:[]->boolean :: next:[]->A :: [], Object, A::[]}

        CT; Ef; El |- e : s
        CT |- s <: javalight.lang.JLIterable t::[]
        s =/=AType javalight.lang.JLIterable t::[]

        norm(CT, X*, T) = t
        norm(CT, X*, JLIterator<T>) = javalight.util.JLIterator t::[]
        
        x notin dom(El)
        CT; Ef; El,x:t |- for(enums) stm ~ void

        CT; Ef; El |- stm* ~ rt
        ------------------------------------------------------------------------------------------------------
        CT; Ef; El |- for(x <- e; enums) stm stm* ~ rt

      S-ForCompIf:
        CT; Ef; El |- e : boolean
        CT; Ef; El |- stm ~ void
        CT; Ef; El |- stm* ~ rt
        -------------------------------------
        CT; Ef; El |- for(if e) stm stm* ~ rt

      S-FormCompIfEnums:
        CT; Ef; El |- e : boolean
        CT; Ef; El |- for(enums) stm ~ void
        CT; Ef; El |- stm* ~ rt
        --------------------------------------------
        CT; Ef; El |- for(if e; enums) stm stm* ~ rt

      S-ForCompAssign:
        x notin dom(El)
        CT; Ef; El |- e : t
        typevars(CT) = X*
        normPrim(CT, X*, T) = t
        CT; Ef; El,x:t |- stm ~ void
        CT; Ef; El |- stm* ~ rt
        --------------------------------------
        CT; Ef; El |- for(x = e) stm stm* ~ rt
    
      S-ForCompAssignEnums:
        x notin dom(El)
        CT; Ef; El |- e : t
        typevars(CT) = X*
        normPrim(CT, X*, T) = t
        CT; Ef; El,x:t |- for(enums) stm ~ void
        CT; Ef; El |- stm* ~ rt
        ---------------------------------------------
        CT; Ef; El |- for(x = e; enums) stm stm* ~ rt

    desugarings
      { typevars(CT) = X*
        CT.javalight.lang.JLIterable = {[], iterator:[]->javalight.util.JLIterator A::[] :: [], Object, A::[]}
        CT.javalight.util.JLIterator = {[], hasNext:[]->boolean :: next:[]->A :: [], Object, A::[]}

        CT; Ef; El |- e : s
        CT |- s <: javalight.lang.JLIterable t::[]
        s =/=AType javalight.lang.JLIterable t::[]

        norm(CT, X*, T) = t
        norm(CT, X*, JLIterator<T>) = javalight.util.JLIterator t::[]


        x notin dom(El)
        CT; Ef; El,x:t |- stm ~ void

        CT; Ef; El |- stm* ~ rt
        ------------------------------------------------------------------------------------------------------
        CT; Ef; El |- [ for(x <- e) stm stm* ] ~ rt
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>
        for(T x : e) stm stm*
      }

      { typevars(CT) = X*

        CT.javalight.lang.JLIterable = {[], iterator:[]->javalight.util.JLIterator A::[] :: [], Object, A::[]}
        CT.javalight.util.JLIterator = {[], hasNext:[]->boolean :: next:[]->A :: [], Object, A::[]}

        CT; Ef; El |- e : s
        CT |- s <: javalight.lang.JLIterable t::[]
        s =/=AType javalight.lang.JLIterable t::[]

        norm(CT, X*, T) = t
        norm(CT, X*, JLIterator<T>) = javalight.util.JLIterator t::[]
        
        x notin dom(El)
        CT; Ef; El,x:t |- for(enums) stm ~ void

        CT; Ef; El |- stm* ~ rt
        ------------------------------------------------------------------------------------------------------
        CT; Ef; El |- [ for(x <- e; enums) stm stm* ] ~ rt
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>
        for(T x : e) for(enums) stm stm*
      }

      { for(if e) stm stm* ~~~> if(e) stm stm* }
      
      { for(if e; enums) stm stm* ~~~> if(e) for(enums) stm stm* }
      
      { x notin dom(El)
        CT; Ef; El |- e : t
        typevars(CT) = X*
        normPrim(CT, X*, T) = t
        CT; Ef; El,x:t |- stm ~ void
        CT; Ef; El |- stm* ~ rt
        ------------------------------------------
        CT; Ef; El |- [ for(x = e) stm stm* ] ~ rt
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>
        { T x = e; stm } stm*
      }

      { x notin dom(El)
        CT; Ef; El |- e : t
        typevars(CT) = X*
        normPrim(CT, X*, T) = t
        CT; Ef; El,x:t |- for(enums) stm ~ void
        CT; Ef; El |- stm* ~ rt
        -------------------------------------------------
        CT; Ef; El |- [ for(x = e; enums) stm stm* ] ~ rt
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>
        { T x = e; for(enums) stm } stm*
      }
}
