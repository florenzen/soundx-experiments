module LetSeqExtension;

extension {
  lexical syntax
    "let" -> Keyword
    "in"  -> Keyword

  lexical restrictions
    "let" "in" -/- [0-9a-zA-Z]

  context-free syntax
    "let" Bindings "in" Term -> Term {cons("Let")}

  context-free syntax
    ID "=" Term          -> Binding
    Binding              -> Bindings
    Binding ";" Bindings -> Bindings

  context-free priorities
    { Term Term                -> Term
      Term "+" Term            -> Term } >
      "let" Bindings "in" Term -> Term

  lexical syntax
    "bs" [0-9a-zA-Z]* -> MVBindings

  lexical restrictions
    MVBindings -/- [0-9a-zA-Z]

  variables
    MVBindings -> Bindings {prefer}

  inductive definitions
    T-LetSeq1:
      (C |- t1 : T1) (C,x:T1 |- let bs in t2 : T2)
      --------------------------------------------
      C |- let x = t1; bs in t2 : T2
    T-LetSeq2:
      (C |- t1 : T1) (C|- t2 : T2)
      ----------------------------
      C |- let x = t1 in t2 : T2

  desugarings
    { (C |- t1 : T1) (C,x:T1 |- let bs in t2 : T2)
      --------------------------------------------
      C |- [ let x = t1; bs in t2 ] : T2
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>
      (\x:T1. let bs in t2) t1 }
    { (C |- t1 : T1) (C |- t2 : T2)
      ------------------------------
      C |- [ let x = t1 in t2 ] : T2
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>
      (\x:T1. t2) t1 }
    // This extension is accepted due to the axioms about fresh names.
    // Since x is not in the assumptions it can be instantiated to
    // fresh(...) such that by Weakening C |- t2 : T2 implies C,x:T1 |- t2 : T2.
    // But LetSeqExtensionTest02 is not type correct by these rules.
    // Bottom line: the axiom about fresh can produce hard to detect bugs.
}
