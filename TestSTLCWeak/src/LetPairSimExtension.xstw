module LetPairSimExtension;

import PairExtension;
import LetSimExtension;

extension {
  context-free syntax
    "(" ID "," ID ")" "=" Term -> Binding

  inductive definitions
    T-LetPair1:
      (C |- t1 : Pair T1) (C,x1:T1,x2:T1 |- let bs in t2 : T2)
      --------------------------------------------------------
      C |- let (x1,x2) = t1; bs in t2 : T2
    T-LetPair2:
      (C |- t1 : Pair T1) (C,x1:T1,x2:T1 |- t2 : T2)
      ----------------------------------------------
      C |- let (x1,x2) = t1 in t2 : T2

  desugarings
    { let (x1,x2) = t1; bs in t2 ~~~>
      let x1 = t1.1 | x2 = t1.2 in let bs in t2 }
      // let y = t1 in let x1 = y.1 | x2 = y.2 in let bs in t2
      // where y = fresh(...)
      // does not work here because verification needs
      //   C,y:Pair T1,x1:T1,x2:T1 |- let bs in t2 : T2
      // but we only have
      //   C,x1:T1,x2:T1 |- let bs in t2 : T2
      // and T-Weak is not sufficient here. We would also need
      // a permutation rule in the form of the Permutation
      // lemma which we cannot formulate easily.
    { let (x1,x2) = t1 in t2 ~~~>
      let x1 = t1.1 | x2 = t1.2 in t2 }
}
