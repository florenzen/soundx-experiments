module PairExtension

extension {
  context-free syntax
    "Pair" Type -> Type {cons("TyPair")}

  desugarings
    { Pair T ~~~> (T->T->T) -> T }

  context-free syntax
    Term "." "1"          -> Term {cons("Fst")}
    Term "." "2"          -> Term {cons("Snd")}
    "(" Term "," Term ")" -> Term {cons("Pair")}

  inductive definitions
    T-Fst:
      (C |- t : Pair T) (x notin dom(C,a:T))
      --------------------------------------
      C |- t.1 : T
    T-Snd:
      C |- t : Pair T
      ---------------
      C |- t.2 : T
    T-Pair:
      (C |- t1 : T) (C |- t2 : T) (x notin dom(C))
      --------------------------------------------
      C |- (t1,t2) : Pair T

  desugarings
    { (C |- t : S) (x notin dom(C,a:T))
      ---------------------------------
      C |- [ t.1 ] : T
      ~~~~~~~~~~~~~~~>
      t (\a:T.\x:T.a) }
    { C |- t : S
      ---------------
      C |- [ t.2 ] : T
      ~~~~~~~~~~~~~~~>
      t (\a:T.\b:T.b) }
    { (C |- t1 : T) (C |- t2 : T) (x notin dom(C))
      --------------------------------------------
      C |- [ (t1,t2) ] : S
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~>
      (\x:T->T->T. (x t1 t2)) }
      // (\a:T.\b:T.\s:T->T->T. (s a b)) t1 t2 }
}

foo = 123;

bar = 1;
