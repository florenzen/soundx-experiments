module LetSimExtension

import LetSeqExtension

extension {
  context-free syntax
    Binding "|" Bindings -> Bindings

  inductive definitions
    T-LetSim1:
      (C |- t1 : T1) (C |- (let bs in (\x:T1. t2)) t1 : T2)
      -----------------------------------------------------
      C |- let x = t1 | bs in t2 : T2

  desugarings
    { (C |- t1 : T1) (C |- (let bs in (\x:T1. t2)) t1 : T2)
      -----------------------------------------------------
      C |- [ let x = t1 | bs in t2 ] : T2
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>
      (let bs in (\x:T1.t2)) t1 }
}
